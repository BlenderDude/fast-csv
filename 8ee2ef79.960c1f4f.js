(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{116:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return c})),r.d(n,"metadata",(function(){return b})),r.d(n,"rightToc",(function(){return i})),r.d(n,"default",(function(){return u}));var a=r(2),t=r(6),o=(r(0),r(136)),s=r(142),l=r(143),c={title:"Examples"},b={id:"parsing/examples",isDocsHomePage:!1,title:"Examples",description:"TypeScript Examples Source",source:"@site/docs/parsing/examples.mdx",permalink:"/fast-csv/docs/parsing/examples",editUrl:"https://github.com/C2FO/fast-csv/edit/master/documentation/docs/parsing/examples.mdx",sidebar:"docs",previous:{title:"Methods",permalink:"/fast-csv/docs/parsing/methods"},next:{title:"Benchmarks",permalink:"/fast-csv/docs/parsing/benchmark"}},i=[{value:"Manual Write",id:"manual-write",children:[]},{value:"Alternate Delimiter",id:"alternate-delimiter",children:[]},{value:"Headers",id:"headers",children:[{value:"First Row As Headers",id:"first-row-as-headers",children:[]},{value:"Custom Headers",id:"custom-headers",children:[]},{value:"Renaming Headers",id:"renaming-headers",children:[]},{value:"Transforming Headers",id:"transforming-headers",children:[]},{value:"Skipping Columns",id:"skipping-columns",children:[]}]},{value:"Ignoring Empty Rows",id:"ignoring-empty-rows",children:[]},{value:"Transforming",id:"transforming",children:[]},{value:"Validation",id:"validation",children:[]},{value:"Max Rows",id:"max-rows",children:[]},{value:"Skip Rows",id:"skip-rows",children:[]},{value:"Skip Lines",id:"skip-lines",children:[]}],m={rightToc:i};function u(e){var n=e.components,r=Object(t.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},m,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/C2FO/fast-csv/tree/master/examples/parsing-ts"}),"TypeScript Examples Source")),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/C2FO/fast-csv/tree/master/examples/parsing-js"}),"JavaScript Examples Source")),Object(o.b)("h2",{id:"manual-write"},"Manual Write"),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { parse } from '@fast-csv/parse';\n\nconst stream = parse({ headers: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write('header1,header2\\n');\nstream.write('col1,col2');\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { parse } = require('fast-csv');\n\nconst stream = parse({ headers: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write('header1,header2\\n');\nstream.write('col1,col2');\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ header1: 'col1', header2: 'col2' }\nParsed 1 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"alternate-delimiter"},"Alternate Delimiter"),Object(o.b)("p",null,"You can provide a ",Object(o.b)("inlineCode",{parentName:"p"},"delimiter")," option to change the delimiter from a ",Object(o.b)("inlineCode",{parentName:"p"},",")," character."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'a1\\tb1',\n    'a2\\tb2'\n].join(EOL);\n\nconst stream = parse({ delimiter: '\\t' })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'a1\\tb1',\n    'a2\\tb2'\n].join(EOL);\n\nconst stream = parse({ delimiter: '\\t' })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"[ 'a1', 'b1' ]\n[ 'a2', 'b2' ]\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"headers"},"Headers"),Object(o.b)("h3",{id:"first-row-as-headers"},"First Row As Headers"),Object(o.b)("p",null,"If you expect the first line your CSV to be headers you may pass in a ",Object(o.b)("inlineCode",{parentName:"p"},"headers")," option."),Object(o.b)("p",null,"Setting the ",Object(o.b)("inlineCode",{parentName:"p"},"headers")," option to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," will cause change each row to an object rather than an array."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'a,b',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'a,b',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: true })\n  .on('error', error => console.error(error))\n  .on('data', row => console.log(row))\n  .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ a: 'a1', b: 'b1' }\n{ a: 'a2', b: 'b2' }\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"custom-headers"},"Custom Headers"),Object(o.b)("p",null,"You may alternatively pass an array of header names."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The order of the headers array will should match the order of fields in the CSV, otherwise the data columns will\nnot match."))),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: ['a', 'b'] })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: [ 'a', 'b' ] })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ a: 'a1', b: 'b1' }\n{ a: 'a2', b: 'b2' }\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"renaming-headers"},"Renaming Headers"),Object(o.b)("p",null,"If the CSV contains a header row but you want to provide custom headers you can pass an array of headers, and set ",Object(o.b)("inlineCode",{parentName:"p"},"renameHeaders")," to true."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'header1,header2',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: ['a', 'b'], renameHeaders: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'header1,header2',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({ headers: [ 'a', 'b' ], renameHeaders: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ a: 'a1', b: 'b1' }\n{ a: 'a2', b: 'b2' }\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"transforming-headers"},"Transforming Headers"),Object(o.b)("p",null,"If the CSV contains a header row but you want transform the headers you can provide a function to the ",Object(o.b)("inlineCode",{parentName:"p"},"headers")," option."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'header1,header2',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({\n        headers: headers => headers.map(h => h?.toUpperCase()),\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'header1,header2',\n    'a1,b1',\n    'a2,b2'\n].join(EOL);\n\nconst stream = parse({\n        headers: headers => headers.map(h => h.toUpperCase()),\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ HEADER1: 'a1', HEADER2: 'b1' }\n{ HEADER1: 'a2', HEADER2: 'b2' }\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h3",{id:"skipping-columns"},"Skipping Columns"),Object(o.b)("p",null,"To omit some of the data columns you may not need, pass a sparse array as ",Object(o.b)("inlineCode",{parentName:"p"},"headers"),"."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'a1,b1,c1',\n    'a2,b2,c2'\n].join(EOL);\n\nconst stream = parse({ headers: ['a', undefined, 'c'] })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'a1,b1,c1',\n    'a2,b2,c2'\n].join(EOL);\n\nconst stream = parse({ headers: [ 'a', undefined, 'c' ] })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ a: 'a1', c: 'c1' }\n{ a: 'a2', c: 'c2' }\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"ignoring-empty-rows"},"Ignoring Empty Rows"),Object(o.b)("p",null,"If your data includes empty rows, the sort Excel might include at the end of the file for instance, you can ignore these by including the ",Object(o.b)("inlineCode",{parentName:"p"},"ignoreEmpty")," option."),Object(o.b)("p",null,"Any rows consisting of nothing but empty strings and/or commas will be skipped, without emitting a 'data', 'data-invalid', or 'error' event."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'a1,b1',\n    ',',      //empty row empty colums\n    'a2,b2',\n    '   ,\\t', //empty row columns with just white space\n    '',       //empty last line\n].join(EOL);\n\nconst stream = parse({ ignoreEmpty: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'a1,b1',\n    ',',      //empty row empty colums\n    'a2,b2',\n    '   ,\\t', //empty row columns with just white space\n    '',       //empty last line\n].join(EOL);\n\nconst stream = parse({ ignoreEmpty: true })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"[ 'a1', 'b1' ]\n[ 'a2', 'b2' ]\nParsed 2 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"transforming"},"Transforming"),Object(o.b)("p",null,"You can transform data by providing a transform function. What is returned from the transform function will be provided to validate and emitted as a row."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\ntype UserRow = {\n    firstName: string;\n    lastName: string;\n};\n\ntype TransformedUserRow = UserRow & {\n    properName: string;\n};\n\nconst stream = parse<UserRow, TransformedUserRow>({ headers: true })\n    .transform(\n        (data: UserRow): TransformedUserRow => ({\n            firstName: data.firstName.toUpperCase(),\n            lastName: data.lastName.toUpperCase(),\n            properName: `${data.firstName} ${data.lastName}`,\n        }),\n    )\n    .on('error', error => console.error(error))\n    .on('data', (row: TransformedUserRow) => console.log(JSON.stringify(row)))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .transform(data => ({\n        firstName: data.firstName.toUpperCase(),\n        lastName: data.lastName.toUpperCase(),\n        properName: `${data.firstName} ${data.lastName}`,\n    }))\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(JSON.stringify(row)))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'{"firstName":"BOB","lastName":"YUKON","properName":"bob yukon"}\n{"firstName":"SALLY","lastName":"YUKON","properName":"sally yukon"}\n{"firstName":"TIMMY","lastName":"YUKON","properName":"timmy yukon"}\nParsed 3 rows\n')))),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"fast-csv")," also supports async transformation with a callback."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\ntype UserRow = {\n    firstName: string;\n    lastName: string;\n};\n\ntype TransformedUserRow = UserRow & {\n    properName: string;\n};\n\nconst stream = parse<UserRow, TransformedUserRow>({ headers: true })\n    .transform((data, cb): void => {\n        setImmediate(() =>\n            cb(null, {\n                firstName: data.firstName.toUpperCase(),\n                lastName: data.lastName.toUpperCase(),\n                properName: `${data.firstName} ${data.lastName}`,\n            }),\n        );\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(JSON.stringify(row)))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .transform((data, cb) => {\n        setImmediate(() => cb(null, {\n            firstName: data.firstName.toUpperCase(),\n            lastName: data.lastName.toUpperCase(),\n            properName: `${data.firstName} ${data.lastName}`,\n        }));\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(JSON.stringify(row)))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'{"firstName":"BOB","lastName":"YUKON","properName":"bob yukon"}\n{"firstName":"SALLY","lastName":"YUKON","properName":"sally yukon"}\n{"firstName":"TIMMY","lastName":"YUKON","properName":"timmy yukon"}\nParsed 3 rows\n')))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"validation"},"Validation"),Object(o.b)("p",null,"You can validate each row in the CSV by providing a validate handler. If a row is invalid then a ",Object(o.b)("inlineCode",{parentName:"p"},"data-invalid")," event will be emitted with the row and the index."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\ntype UserRow = {\n    firstName: string;\n    lastName: string;\n};\nconst stream = parse<UserRow, UserRow>({ headers: true })\n    .validate((data: UserRow): boolean => data.firstName !== 'bob')\n    .on('error', error => console.error(error))\n    .on('data', (row: UserRow) => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', (row, rowNumber) =>\n        console.log(`Invalid [rowNumber=${rowNumber}] [row=${JSON.stringify(row)}]`),\n    )\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .validate(data => data.firstName !== 'bob')\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', (row, rowNumber) => console.log(`Invalid [rowNumber=${rowNumber}] [row=${JSON.stringify(row)}]`))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'Invalid [rowNumber=1] [row={"firstName":"bob","lastName":"yukon"}]\nValid [row={"firstName":"sally","lastName":"yukon"}]\nValid [row={"firstName":"timmy","lastName":"yukon"}]\nParsed 2 rows\n')))),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"fast-csv")," also supports async validation, with a callback."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\ntype UserRow = {\n    firstName: string;\n    lastName: string;\n};\n\nconst stream = parse<UserRow, UserRow>({ headers: true })\n    .validate((row, cb): void => {\n        setImmediate(() => cb(null, row.firstName !== 'bob'));\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', row => console.log(`Invalid [row=${JSON.stringify(row)}]`))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .validate((row, cb) => {\n        setImmediate(() => cb(null, row.firstName !== 'bob'));\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', (row, rowNumber) => console.log(`Invalid [rowNumber=${rowNumber}] [row=${JSON.stringify(row)}]`))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'Invalid [row={"firstName":"bob","lastName":"yukon"}]\nValid [row={"firstName":"sally","lastName":"yukon"}]\nValid [row={"firstName":"timmy","lastName":"yukon"}]\nParsed 3 rows\n')))),Object(o.b)("p",null,"Sometimes you may wish to provide a reason that the row was invalid, you can use the callback to provide additional info."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { EOL } from 'os';\nimport { parse } from '@fast-csv/parse';\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\ntype UserRow = {\n    firstName: string;\n    lastName: string;\n};\n\nconst stream = parse<UserRow, UserRow>({ headers: true })\n    .validate((row, cb): void => {\n        const isValid = row.firstName !== 'bob';\n        if (!isValid) {\n            return cb(null, false, 'Name is bob');\n        }\n        return cb(null, true);\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', (row, rowNumber, reason) => {\n        console.log(`Invalid [rowNumber=${rowNumber}] [row=${JSON.stringify(row)}] [reason=${reason}]`);\n    })\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { EOL } = require('os');\nconst { parse } = require('fast-csv');\n\nconst CSV_STRING = [\n    'firstName,lastName',\n    'bob,yukon',\n    'sally,yukon',\n    'timmy,yukon',\n].join(EOL);\n\nconst stream = parse({ headers: true })\n    .validate((row, cb) => {\n        const isValid = row.firstName !== 'bob';\n        if (!isValid) {\n            return cb(null, false, 'Name is bob');\n        }\n        return cb(null, true);\n    })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(`Valid [row=${JSON.stringify(row)}]`))\n    .on('data-invalid', (row, rowNumber, reason) => {\n        console.log(`Invalid [rowNumber=${rowNumber}] [row=${JSON.stringify(row)}] [reason=${reason}]`);\n    })\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nstream.write(CSV_STRING);\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'Invalid [rowNumber=1] [row={"firstName":"bob","lastName":"yukon"}] [reason=Name is bob]\nValid [row={"firstName":"sally","lastName":"yukon"}]\nValid [row={"firstName":"timmy","lastName":"yukon"}]\nParsed 2 rows\n')))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"max-rows"},"Max Rows"),Object(o.b)("p",null,"In the following example there are 10 rows, but only 5 will be parsed because of the ",Object(o.b)("inlineCode",{parentName:"p"},"maxRows")," option."),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { parse } from '@fast-csv/parse';\n\nconst rows = [\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n    'col5,col5\\n',\n    'col6,col6\\n',\n    'col7,col7\\n',\n    'col8,col8\\n',\n    'col9,col9\\n',\n    'col10,col10',\n];\n\nconst stream = parse({ headers: true, maxRows: 5 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { parse } = require('fast-csv');\n\nconst rows = [\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n    'col5,col5\\n',\n    'col6,col6\\n',\n    'col7,col7\\n',\n    'col8,col8\\n',\n    'col9,col9\\n',\n    'col10,col10',\n];\n\nconst stream = parse({ headers: true, maxRows: 5 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ header1: 'col1', header2: 'col1' }\n{ header1: 'col2', header2: 'col2' }\n{ header1: 'col3', header2: 'col3' }\n{ header1: 'col4', header2: 'col4' }\n{ header1: 'col5', header2: 'col5' }\nParsed 5 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"skip-rows"},"Skip Rows"),Object(o.b)("p",null,"In the following example the first 2 rows are skipped."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Notice how the headers are not skipped, only the rows."))),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { parse } from '@fast-csv/parse';\n\nconst rows = [\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n    'col5,col5\\n',\n    'col6,col6\\n',\n];\n\nconst stream = parse({ headers: true, skipRows: 2 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { parse } = require('fast-csv');\n\nconst rows = [\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n    'col5,col5\\n',\n    'col6,col6\\n',\n];\n\nconst stream = parse({ headers: true, skipRows: 2 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ header1: 'col3', header2: 'col3' }\n{ header1: 'col4', header2: 'col4' }\n{ header1: 'col5', header2: 'col5' }\n{ header1: 'col6', header2: 'col6' }\nParsed 4 rows\n")))),Object(o.b)("hr",null),Object(o.b)("h2",{id:"skip-lines"},"Skip Lines"),Object(o.b)("p",null,"In the following example the first 2 lines are skipped."),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Notice how the headers come from the third line because the first two are skipped."))),Object(o.b)(s.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { parse } from '@fast-csv/parse';\n\nconst rows = [\n    'skip1_header1,skip1_header2\\n',\n    'skip2_header1,skip2_header2\\n',\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n];\n\nconst stream = parse({ headers: true, skipLines: 2 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', (rowCount: number) => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { parse } = require('fast-csv');\n\nconst rows = [\n    'skip1_header1,skip1_header2\\n',\n    'skip2_header1,skip2_header2\\n',\n    'header1,header2\\n',\n    'col1,col1\\n',\n    'col2,col2\\n',\n    'col3,col3\\n',\n    'col4,col4\\n',\n];\n\nconst stream = parse({ headers: true, skipLines: 2 })\n    .on('error', error => console.error(error))\n    .on('data', row => console.log(row))\n    .on('end', rowCount => console.log(`Parsed ${rowCount} rows`));\n\nrows.forEach(row => stream.write(row));\nstream.end();\n"))),Object(o.b)(l.a,{value:"output",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"{ header1: 'col1', header2: 'col1' }\n{ header1: 'col2', header2: 'col2' }\n{ header1: 'col3', header2: 'col3' }\n{ header1: 'col4', header2: 'col4' }\nParsed 4 rows\n")))))}u.isMDXComponent=!0},136:function(e,n,r){"use strict";r.d(n,"a",(function(){return m})),r.d(n,"b",(function(){return d}));var a=r(0),t=r.n(a);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var b=t.a.createContext({}),i=function(e){var n=t.a.useContext(b),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},m=function(e){var n=i(e.components);return t.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},p=t.a.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),m=i(r),p=a,d=m["".concat(s,".").concat(p)]||m[p]||u[p]||o;return r?t.a.createElement(d,l(l({ref:n},b),{},{components:r})):t.a.createElement(d,l({ref:n},b))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var b=2;b<o;b++)s[b]=r[b];return t.a.createElement.apply(null,s)}return t.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},137:function(e,n,r){"use strict";function a(e){var n,r,t="";if("string"==typeof e||"number"==typeof e)t+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(r=a(e[n]))&&(t&&(t+=" "),t+=r);else for(n in e)e[n]&&(t&&(t+=" "),t+=n);return t}n.a=function(){for(var e,n,r=0,t="";r<arguments.length;)(e=arguments[r++])&&(n=a(e))&&(t&&(t+=" "),t+=n);return t}},139:function(e,n,r){"use strict";var a=r(0);const t=Object(a.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{},isAnnouncementBarClosed:!1,closeAnnouncementBar:()=>{}});n.a=t},140:function(e,n,r){"use strict";var a=r(0),t=r(139);n.a=function(){return Object(a.useContext)(t.a)}},142:function(e,n,r){"use strict";var a=r(0),t=r.n(a),o=r(140),s=r(137),l=r(92),c=r.n(l);const b=37,i=39;n.a=function(e){const{block:n,children:r,defaultValue:l,values:m,groupId:u}=e,{tabGroupChoices:p,setTabGroupChoices:d}=Object(o.a)(),[O,w]=Object(a.useState)(l);if(null!=u){const e=p[u];null!=e&&e!==O&&m.some(n=>n.value===e)&&w(e)}const j=e=>{w(e),null!=u&&d(u,e)},N=[];return t.a.createElement("div",null,t.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n})},m.map(({value:e,label:n})=>t.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":O===e,className:Object(s.a)("tabs__item",c.a.tabItem,{"tabs__item--active":O===e}),key:e,ref:e=>N.push(e),onKeyDown:e=>((e,n,r)=>{switch(r.keyCode){case i:((e,n)=>{const r=e.indexOf(n)+1;e[r]?e[r].focus():e[0].focus()})(e,n);break;case b:((e,n)=>{const r=e.indexOf(n)-1;e[r]?e[r].focus():e[e.length-1].focus()})(e,n)}})(N,e.target,e),onFocus:()=>j(e),onClick:()=>j(e)},n))),t.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(r).filter(e=>e.props.value===O)[0]))}},143:function(e,n,r){"use strict";var a=r(0),t=r.n(a);n.a=function(e){return t.a.createElement("div",null,e.children)}}}]);