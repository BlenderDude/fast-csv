(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{100:function(e,a,t){"use strict";var r=t(0),n=t.n(r),s=t(96),l=t(95),c=t(47),u=t.n(c);const o=37,b=39;a.a=function(e){const{block:a,children:t,defaultValue:c,values:d,groupId:m,className:v}=e,{tabGroupChoices:p,setTabGroupChoices:i}=Object(s.a)(),[h,j]=Object(r.useState)(c),[O,f]=Object(r.useState)(!1);if(null!=m){const e=p[m];null!=e&&e!==h&&d.some((a=>a.value===e))&&j(e)}const w=e=>{j(e),null!=m&&i(m,e)},S=[],T=e=>{e.metaKey||e.altKey||e.ctrlKey||f(!0)},y=()=>{f(!1)};return Object(r.useEffect)((()=>(window.addEventListener("keydown",T),window.addEventListener("mousedown",y),()=>{window.removeEventListener("keydown",T),window.removeEventListener("mousedown",y)})),[]),n.a.createElement("div",null,n.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":a},v)},d.map((({value:e,label:a})=>n.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===e,className:Object(l.a)("tabs__item",u.a.tabItem,{"tabs__item--active":h===e}),style:O?{}:{outline:"none"},key:e,ref:e=>S.push(e),onKeyDown:e=>{((e,a,t)=>{switch(t.keyCode){case b:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case o:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(S,e.target,e),T(e)},onFocus:()=>w(e),onClick:()=>{w(e),f(!1)},onPointerDown:()=>f(!1)},a)))),n.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},r.Children.toArray(t).filter((e=>e.props.value===h))[0]))}},101:function(e,a,t){"use strict";var r=t(0),n=t.n(r);a.a=function(e){return n.a.createElement("div",null,e.children)}},70:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return u})),t.d(a,"metadata",(function(){return o})),t.d(a,"rightToc",(function(){return b})),t.d(a,"default",(function(){return m}));var r=t(2),n=t(6),s=(t(0),t(94)),l=t(100),c=t(101),u={title:"Examples"},o={unversionedId:"formatting/examples",id:"formatting/examples",isDocsHomePage:!1,title:"Examples",description:"TypeScript Examples Source",source:"@site/docs/formatting/examples.mdx",slug:"/formatting/examples",permalink:"/fast-csv/docs/formatting/examples",editUrl:"https://github.com/C2FO/fast-csv/edit/master/documentation/docs/formatting/examples.mdx",version:"current",sidebar:"docs",previous:{title:"Methods",permalink:"/fast-csv/docs/formatting/methods"},next:{title:"v2.x-to-v3.x",permalink:"/fast-csv/docs/migration-guides/v2.x-to-v3.x"}},b=[{value:"Alternate <code>delimiter</code>",id:"alternate-delimiter",children:[]},{value:"Alternate <code>rowDelimiter</code>",id:"alternate-rowdelimiter",children:[]},{value:"Alternate <code>quote</code>",id:"alternate-quote",children:[]},{value:"Alternate <code>escape</code>",id:"alternate-escape",children:[]},{value:"Headers",id:"headers",children:[{value:"Auto Discovery",id:"auto-discovery",children:[]},{value:"Provided Headers",id:"provided-headers",children:[]}]},{value:"Write Headers",id:"write-headers",children:[{value:"Do not write headers.",id:"do-not-write-headers",children:[]},{value:"Specify column order without headers",id:"specify-column-order-without-headers",children:[]}]},{value:"quoteColumns",id:"quotecolumns",children:[{value:"boolean",id:"boolean",children:[]},{value:"boolean[]",id:"boolean-1",children:[]},{value:"object",id:"object",children:[]},{value:"Quote Columns NOT headers",id:"quote-columns-not-headers",children:[]}]},{value:"quoteHeaders option",id:"quoteheaders-option",children:[]},{value:"Transforming Rows",id:"transforming-rows",children:[]},{value:"Appending To A CSV",id:"appending-to-a-csv",children:[]}],d={rightToc:b};function m(e){var a=e.components,t=Object(n.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},d,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("p",null,Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/C2FO/fast-csv/tree/master/examples/formatting-ts"}),"TypeScript Examples Source")),Object(s.b)("p",null,Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/C2FO/fast-csv/tree/master/examples/formatting-js"}),"JavaScript Examples Source")),Object(s.b)("h2",{id:"alternate-delimiter"},"Alternate ",Object(s.b)("inlineCode",{parentName:"h2"},"delimiter")),Object(s.b)("p",null,"You can change the default delimiter ",Object(s.b)("inlineCode",{parentName:"p"},",")," by specifying the ",Object(s.b)("inlineCode",{parentName:"p"},"delimiter")," option"),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst stream = format({ delimiter: '\\t' });\nstream.pipe(process.stdout);\n\nstream.write(['a', 'b']);\nstream.write(['a1', 'b1']);\nstream.write(['a2', 'b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst stream = format({ delimiter: '\\t' });\nstream.pipe(process.stdout);\n\nstream.write(['a', 'b']);\nstream.write(['a1', 'b1']);\nstream.write(['a2', 'b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"a\\tb\na1\\tb1\na2\\tb2\n")))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"alternate-rowdelimiter"},"Alternate ",Object(s.b)("inlineCode",{parentName:"h2"},"rowDelimiter")),Object(s.b)("p",null,"You can change the default row delimiter ",Object(s.b)("inlineCode",{parentName:"p"},"\\n")," by specifying the ",Object(s.b)("inlineCode",{parentName:"p"},"rowDelimiter")," option."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst stream = format({ rowDelimiter: '||' });\nstream.pipe(process.stdout);\n\nstream.write(['a', 'b']);\nstream.write(['a1', 'b1']);\nstream.write(['a2', 'b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst stream = format({ rowDelimiter: '||' });\nstream.pipe(process.stdout);\n\nstream.write(['a', 'b']);\nstream.write(['a1', 'b1']);\nstream.write(['a2', 'b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"a,b||a1,b1||a2,b2\n")))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"alternate-quote"},"Alternate ",Object(s.b)("inlineCode",{parentName:"h2"},"quote")),Object(s.b)("p",null,"You change change the default quote ",Object(s.b)("inlineCode",{parentName:"p"},'"')," option by specifying the ",Object(s.b)("inlineCode",{parentName:"p"},"quote")," option."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst stream = format({ quote: \"'\" });\nstream.pipe(process.stdout);\n\n// each field will be quoted because it contains a delimiter\nstream.write(['a,a', 'b,b']);\nstream.write(['a1,a1', 'b1,b1']);\nstream.write(['a2,a2', 'b2,b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst stream = format({ quote: \"'\" });\nstream.pipe(process.stdout);\n\n// each field will be quoted because it contains a delimiter\nstream.write(['a,a', 'b,b']);\nstream.write(['a1,a1', 'b1,b1']);\nstream.write(['a2,a2', 'b2,b2']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"'a,a','b,b'\n'a1,a1','b1,b1'\n'a2,a2','b2,b2'\n")))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"alternate-escape"},"Alternate ",Object(s.b)("inlineCode",{parentName:"h2"},"escape")),Object(s.b)("p",null,"You change change the default escape ",Object(s.b)("inlineCode",{parentName:"p"},'"')," option by specifying the ",Object(s.b)("inlineCode",{parentName:"p"},"escpae")," option."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst stream = format({ escape: \"'\" });\nstream.pipe(process.stdout);\n\n// wrap each field in a quote so it is escaped and quoted\nstream.write(['\"a\"', '\"b\"']);\nstream.write(['\"a1\"', '\"b1\"']);\nstream.write(['\"a2\"', '\"b2\"']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst stream = format({ escape: \"'\" });\nstream.pipe(process.stdout);\n\n// wrap each field in a quote so it is escaped and quoted\nstream.write(['\"a\"', '\"b\"']);\nstream.write(['\"a1\"', '\"b1\"']);\nstream.write(['\"a2\"', '\"b2\"']);\nstream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'"\'"a\'"","\'"b\'""\n"\'"a1\'"","\'"b1\'""\n"\'"a2\'"","\'"b2\'""\n')))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"headers"},"Headers"),Object(s.b)("h3",{id:"auto-discovery"},"Auto Discovery"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"fast-csv")," will auto-discover headers when the ",Object(s.b)("inlineCode",{parentName:"p"},"headers")," option is set to ",Object(s.b)("inlineCode",{parentName:"p"},"true"),"."),Object(s.b)("div",{className:"admonition admonition-info alert alert--info"},Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"When working with one-dimensional array rows (e.g. ",Object(s.b)("inlineCode",{parentName:"p"},"['a', 'b', 'c']"),") this is a no-op."))),Object(s.b)("p",null,"In this example the headers are auto-discovered from the objects passed in."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nvalue1a,value1b\nvalue2a,value2b\nvalue3a,value3b\nvalue4a,value4b\n")))),Object(s.b)("p",null,"In this example the headers are auto-discovered from the hash arrays passed in."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write([\n    ['header1', 'value1a'],\n    ['header2', 'value1b'],\n]);\ncsvStream.write([\n    ['header1', 'value2a'],\n    ['header2', 'value2b'],\n]);\ncsvStream.write([\n    ['header1', 'value3a'],\n    ['header2', 'value3b'],\n]);\ncsvStream.write([\n    ['header1', 'value4a'],\n    ['header2', 'value4b'],\n]);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write([\n    ['header1', 'value1a'],\n    ['header2', 'value1b'],\n]);\ncsvStream.write([\n    ['header1', 'value2a'],\n    ['header2', 'value2b'],\n]);\ncsvStream.write([\n    ['header1', 'value3a'],\n    ['header2', 'value3b'],\n]);\ncsvStream.write([\n    ['header1', 'value4a'],\n    ['header2', 'value4b'],\n]);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nvalue1a,value1b\nvalue2a,value2b\nvalue3a,value3b\nvalue4a,value4b\n")))),Object(s.b)("h3",{id:"provided-headers"},"Provided Headers"),Object(s.b)("p",null,"You can also provide a set of ",Object(s.b)("inlineCode",{parentName:"p"},"headers")," by providing an array. This allows you to"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"Reorder and/or exclude columns when working with object rows."),Object(s.b)("li",{parentName:"ul"},"Rename  and/or exclude columns when working with hash array rows."),Object(s.b)("li",{parentName:"ul"},"Specify headers or remove columns when working with array rows."),Object(s.b)("li",{parentName:"ul"},"Enforce column order, when rows are objects.")),Object(s.b)("p",null,"In this example a custom set of headers is provided for rows that are arrays."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header1', 'header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write(['value1a', 'value1b']);\ncsvStream.write(['value2a', 'value2b']);\ncsvStream.write(['value3a', 'value3b']);\ncsvStream.write(['value4a', 'value4b']);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header1', 'header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write(['value1a', 'value1b']);\ncsvStream.write(['value2a', 'value2b']);\ncsvStream.write(['value3a', 'value3b']);\ncsvStream.write(['value4a', 'value4b']);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nvalue1a,value1b\nvalue2a,value2b\nvalue3a,value3b\nvalue4a,value4b\n")))),Object(s.b)("p",null,"In this example the headers are overridden with a custom set of headers"),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header1', 'header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write([\n    ['h1', 'value1a'],\n    ['h2', 'value1b'],\n]);\ncsvStream.write([\n    ['h1', 'value2a'],\n    ['h2', 'value2b'],\n]);\ncsvStream.write([\n    ['h1', 'value3a'],\n    ['h2', 'value3b'],\n]);\ncsvStream.write([\n    ['h1', 'value4a'],\n    ['h2', 'value4b'],\n]);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header1', 'header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write([\n    ['h1', 'value1a'],\n    ['h2', 'value1b'],\n]);\ncsvStream.write([\n    ['h1', 'value2a'],\n    ['h2', 'value2b'],\n]);\ncsvStream.write([\n    ['h1', 'value3a'],\n    ['h2', 'value3b'],\n]);\ncsvStream.write([\n    ['h1', 'value4a'],\n    ['h2', 'value4b'],\n]);\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nvalue1a,value1b\nvalue2a,value2b\nvalue3a,value3b\nvalue4a,value4b\n")))),Object(s.b)("p",null,"In this example the columns are reordered."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header2', 'header1'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header2', 'header1'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header2,header1\nvalue1b,value1a\nvalue2b,value2a\nvalue3b,value3a\nvalue4b,value4a\n")))),Object(s.b)("p",null,"In this example one of the columns is removed."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header2'] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value1b' });\ncsvStream.write({ header1: 'value2a', header2: 'value2b' });\ncsvStream.write({ header1: 'value3a', header2: 'value3b' });\ncsvStream.write({ header1: 'value4a', header2: 'value4b' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header2\nvalue1b\nvalue2b\nvalue3b\nvalue4b\n")))),Object(s.b)("h2",{id:"write-headers"},"Write Headers"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"writeHeaders")," option can be used to prevent writing headers, while still auto discovering them or providing them."),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"writeHeaders")," option can be useful when appending to a csv to prevent writing headers twice. See the ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"#examples-appending"}),"append example")),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"If ",Object(s.b)("strong",{parentName:"p"},"writeHeaders")," is set to ",Object(s.b)("strong",{parentName:"p"},"false"),", ",Object(s.b)("strong",{parentName:"p"},"headers")," is set to ",Object(s.b)("strong",{parentName:"p"},"true"),", and your rows are arrays, the first row will\nnot be written."))),Object(s.b)("h3",{id:"do-not-write-headers"},"Do not write headers."),Object(s.b)("p",null,"In this example the auto discovered headers are not written."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, writeHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, writeHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"value1a,value2a\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\n")))),Object(s.b)("h3",{id:"specify-column-order-without-headers"},"Specify column order without headers"),Object(s.b)("p",null,"In this example the headers are provided to specify order of columns but they are ",Object(s.b)("strong",{parentName:"p"},"not")," written."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header2', 'header1'], writeHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header2', 'header1'], writeHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"value2a,value1a\nvalue2a,value1a\nvalue2a,value1a\nvalue2a,value1a\n")))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"quotecolumns"},"quoteColumns"),Object(s.b)("p",null,"Sometimes you may need to quote columns in a certain ways in order to meet certain requirements. ",Object(s.b)("inlineCode",{parentName:"p"},"fast-csv")," can quote columns and headers almost anyway you may need."),Object(s.b)("h3",{id:"boolean"},"boolean"),Object(s.b)("p",null,"Setting ",Object(s.b)("inlineCode",{parentName:"p"},"quoteColumns")," to true will by default quote all columns and headers."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, quoteColumns: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, quoteColumns: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'"header1","header2"\n"value1a","value2a"\n"value1a","value2a"\n"value1a","value2a"\n"value1a","value2a"\n')))),Object(s.b)("h3",{id:"boolean-1"},"boolean[]"),Object(s.b)("p",null,"Setting ",Object(s.b)("inlineCode",{parentName:"p"},"quoteColumns")," to a ",Object(s.b)("inlineCode",{parentName:"p"},"boolean[]")," will quote the columns that are set to true at each index in the array."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header1', 'header2'], quoteColumns: [false, true] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header1', 'header2'], quoteColumns: [false, true] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'header1,"header2"\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\n')))),Object(s.b)("h3",{id:"object"},"object"),Object(s.b)("p",null,"Setting ",Object(s.b)("inlineCode",{parentName:"p"},"quoteColumns")," to a ",Object(s.b)("inlineCode",{parentName:"p"},"{[string]: boolean}")," will quote the columns that are in the object with a value of true"),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, quoteColumns: { header2: true } });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, quoteColumns: { header2: true } });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'header1,"header2"\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\n')))),Object(s.b)("h3",{id:"quote-columns-not-headers"},"Quote Columns NOT headers"),Object(s.b)("p",null,"If you need to quote columns and not headers you can set ",Object(s.b)("inlineCode",{parentName:"p"},"quoteHeaders")," to ",Object(s.b)("inlineCode",{parentName:"p"},"false"),"."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, quoteColumns: { header2: true }, quoteHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, quoteColumns: { header2: true }, quoteHeaders: false });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'header1,header2\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\nvalue1a,"value2a"\n')))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"quoteheaders-option"},"quoteHeaders option"),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"quoteHeaders")," option uses the same types as ",Object(s.b)("inlineCode",{parentName:"p"},"quoteColumns"),"."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, quoteHeaders: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, quoteHeaders: true });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'"header1","header2"\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\n')))),Object(s.b)("p",null,"In this example we specify the headers to quote by passing in an array to specify which headers to quote"),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: ['header1', 'header2'], quoteHeaders: [false, true] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: ['header1', 'header2'], quoteHeaders: [false, true] });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'header1,"header2"\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\n')))),Object(s.b)("p",null,"In this example we specify the headers to quote by passing in an object where the key is the header name and the value\nis a boolean."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\nconst csvStream = format({ headers: true, quoteHeaders: { header2: true } });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true, quoteHeaders: { header2: true } });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),'header1,"header2"\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\nvalue1a,value2a\n')))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"transforming-rows"},"Transforming Rows"),Object(s.b)("p",null,"You can transform rows by using the ",Object(s.b)("inlineCode",{parentName:"p"},".transform")," method."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\ninterface CsvRow {\n    header1: string;\n    header2: string;\n}\n\nconst csvStream = format<CsvRow, CsvRow>({ headers: true }).transform((row: CsvRow) => ({\n    header1: row.header1.toUpperCase(),\n    header2: row.header2.toUpperCase(),\n}));\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true }).transform(row => ({\n    header1: row.header1.toUpperCase(),\n    header2: row.header2.toUpperCase(),\n}));\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\n")))),Object(s.b)("p",null,"You can also specify your transform method as an option."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\ninterface CsvRow {\n    header1: string;\n    header2: string;\n}\n\nconst transform = (row: CsvRow): CsvRow => ({\n    header1: row.header1.toUpperCase(),\n    header2: row.header2.toUpperCase(),\n});\n\nconst csvStream = format({ headers: true, transform });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst transform = row => ({\n    header1: row.header1.toUpperCase(),\n    header2: row.header2.toUpperCase(),\n});\n\nconst csvStream = format({ headers: true, transform });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\n")))),Object(s.b)("p",null,"Transform can also be async by accepting a callback."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import { format } from '@fast-csv/format';\n\ninterface CsvRow {\n    header1: string;\n    header2: string;\n}\n\nconst csvStream = format<CsvRow, CsvRow>({ headers: true })\n    .transform((row, cb) => {\n        setImmediate(() => cb(null, {\n                header1: row.header1.toUpperCase(),\n                header2: row.header2.toUpperCase(),\n        }));\n    });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const { format } = require('@fast-csv/format');\n\nconst csvStream = format({ headers: true })\n    .transform((row, cb) => {\n        setImmediate(() => cb(null, {\n            header1: row.header1.toUpperCase(),\n            header2: row.header2.toUpperCase(),\n        }));\n    });\n\ncsvStream.pipe(process.stdout).on('end', () => process.exit());\n\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.write({ header1: 'value1a', header2: 'value2a' });\ncsvStream.end();\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"header1,header2\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\nVALUE1A,VALUE2A\n")))),Object(s.b)("hr",null),Object(s.b)("h2",{id:"appending-to-a-csv"},"Appending To A CSV"),Object(s.b)("p",null,"In this example a new csv is created then appended to."),Object(s.b)(l.a,{defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"},{label:"Output",value:"output"}],mdxType:"Tabs"},Object(s.b)(c.a,{value:"ts",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"import * as path from 'path';\nimport * as fs from 'fs';\nimport { FormatterOptionsArgs, Row, writeToStream } from '@fast-csv/format';\n\ntype CsvFileOpts = {\n    headers: string[];\n    path: string;\n};\n\nclass CsvFile {\n    static write(stream: NodeJS.WritableStream, rows: Row[], options: FormatterOptionsArgs<Row, Row>): Promise<void> {\n        return new Promise((res, rej) => {\n            writeToStream(stream, rows, options)\n                .on('error', (err: Error) => rej(err))\n                .on('finish', () => res());\n        });\n    }\n\n    private readonly headers: string[];\n\n    private readonly path: string;\n\n    private readonly writeOpts: FormatterOptionsArgs<Row, Row>;\n\n    constructor(opts: CsvFileOpts) {\n        this.headers = opts.headers;\n        this.path = opts.path;\n        this.writeOpts = { headers: this.headers, includeEndRowDelimiter: true };\n    }\n\n    create(rows: Row[]): Promise<void> {\n        return CsvFile.write(fs.createWriteStream(this.path), rows, { ...this.writeOpts });\n    }\n\n    append(rows: Row[]): Promise<void> {\n        return CsvFile.write(fs.createWriteStream(this.path, { flags: 'a' }), rows, {\n            ...this.writeOpts,\n            // dont write the headers when appending\n            writeHeaders: false,\n        } as FormatterOptionsArgs<Row, Row>);\n    }\n\n    read(): Promise<Buffer> {\n        return new Promise((res, rej) => {\n            fs.readFile(this.path, (err, contents) => {\n                if (err) {\n                    return rej(err);\n                }\n                return res(contents);\n            });\n        });\n    }\n}\n\nconst csvFile = new CsvFile({\n    path: path.resolve(__dirname, 'append.tmp.csv'),\n    // headers to write\n    headers: ['c', 'b', 'a'],\n});\n\n// 1. create the csv\ncsvFile\n    .create([\n        { a: 'a1', b: 'b1', c: 'c1' },\n        { b: 'b2', a: 'a2', c: 'c2' },\n        { a: 'a3', b: 'b3', c: 'c3' },\n    ])\n    // append rows to file\n    .then(() =>\n        csvFile.append([\n            { a: 'a4', b: 'b4', c: 'c4' },\n            { a: 'a5', b: 'b5', c: 'c5' },\n        ]),\n    )\n    // append another row\n    .then(() => csvFile.append([{ a: 'a6', b: 'b6', c: 'c6' }]))\n    .then(() => csvFile.read())\n    .then(contents => {\n        console.log(`${contents}`);\n    })\n    .catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n"))),Object(s.b)(c.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"const path = require('path');\nconst fs = require('fs');\nconst csv = require('@fast-csv/format');\n\nclass CsvFile {\n    static write(filestream, rows, options) {\n        return new Promise((res, rej) => {\n            csv.writeToStream(filestream, rows, options)\n                .on('error', err => rej(err))\n                .on('finish', () => res());\n        });\n    }\n\n    constructor(opts) {\n        this.headers = opts.headers;\n        this.path = opts.path;\n        this.writeOpts = { headers: this.headers, includeEndRowDelimiter: true };\n    }\n\n    create(rows) {\n        return CsvFile.write(fs.createWriteStream(this.path), rows, { ...this.writeOpts });\n    }\n\n    append(rows) {\n        return CsvFile.write(fs.createWriteStream(this.path, { flags: 'a' }), rows, {\n            ...this.writeOpts,\n            // dont write the headers when appending\n            writeHeaders: false,\n        });\n    }\n\n    read() {\n        return new Promise((res, rej) => {\n            fs.readFile(this.path, (err, contents) => {\n                if (err) {\n                    return rej(err);\n                }\n                return res(contents);\n            });\n        });\n    }\n}\n\nconst csvFile = new CsvFile({\n    path: path.resolve(__dirname, 'append.tmp.csv'),\n    // headers to write\n    headers: ['c', 'b', 'a'],\n});\n\n// 1. create the csv\ncsvFile\n    .create([\n        { a: 'a1', b: 'b1', c: 'c1' },\n        { b: 'b2', a: 'a2', c: 'c2' },\n        { a: 'a3', b: 'b3', c: 'c3' },\n    ])\n    // append rows to file\n    .then(() =>\n        csvFile.append([\n            { a: 'a4', b: 'b4', c: 'c4' },\n            { a: 'a5', b: 'b5', c: 'c5' },\n        ]),\n    )\n    // append another row\n    .then(() => csvFile.append([{ a: 'a6', b: 'b6', c: 'c6' }]))\n    .then(() => csvFile.read())\n    .then(contents => {\n        console.log(`${contents}`);\n    })\n    .catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n"))),Object(s.b)(c.a,{value:"output",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"c,b,a\nc1,b1,a1\nc2,b2,a2\nc3,b3,a3\nc4,b4,a4\nc5,b5,a5\nc6,b6,a6\n")))))}m.isMDXComponent=!0},94:function(e,a,t){"use strict";t.d(a,"a",(function(){return d})),t.d(a,"b",(function(){return p}));var r=t(0),n=t.n(r);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function u(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var o=n.a.createContext({}),b=function(e){var a=n.a.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):c(c({},a),e)),t},d=function(e){var a=b(e.components);return n.a.createElement(o.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.a.createElement(n.a.Fragment,{},a)}},v=n.a.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),d=b(t),v=r,p=d["".concat(l,".").concat(v)]||d[v]||m[v]||s;return t?n.a.createElement(p,c(c({ref:a},o),{},{components:t})):n.a.createElement(p,c({ref:a},o))}));function p(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=v;var c={};for(var u in a)hasOwnProperty.call(a,u)&&(c[u]=a[u]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var o=2;o<s;o++)l[o]=t[o];return n.a.createElement.apply(null,l)}return n.a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},95:function(e,a,t){"use strict";function r(e){var a,t,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=r(e[a]))&&(n&&(n+=" "),n+=t);else for(a in e)e[a]&&(n&&(n+=" "),n+=a);return n}a.a=function(){for(var e,a,t=0,n="";t<arguments.length;)(e=arguments[t++])&&(a=r(e))&&(n&&(n+=" "),n+=a);return n}},96:function(e,a,t){"use strict";var r=t(0),n=t(97);a.a=function(){const e=Object(r.useContext)(n.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},97:function(e,a,t){"use strict";var r=t(0);const n=Object(r.createContext)(void 0);a.a=n}}]);